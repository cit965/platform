{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/plugin.ts"],"sourcesContent":["// https://spec.commonmark.org/0.29/#line-ending\nexport const NEWLINES_RE = /\\r\\n?|\\n/g;\n\nexport const dedent = (text: string): string => {\n  const lines = text.split(\"\\n\");\n\n  const minIndentLength = lines.reduce((acc, line) => {\n    for (let i = 0; i < line.length; i++)\n      if (line[i] !== \" \" && line[i] !== \"\\t\") return Math.min(i, acc);\n\n    return acc;\n  }, Infinity);\n\n  if (minIndentLength < Infinity)\n    return lines.map((x) => x.slice(minIndentLength)).join(\"\\n\");\n\n  return text;\n};\n","import fs from \"node:fs\";\n\nimport { type PluginWithOptions } from \"markdown-it\";\nimport { type RuleBlock } from \"markdown-it/lib/parser_block.js\";\nimport { type RuleCore } from \"markdown-it/lib/parser_core.js\";\nimport type Token from \"markdown-it/lib/token.js\";\nimport path from \"upath\";\n\nimport { type MarkdownItIncludeOptions } from \"./options.js\";\nimport { type IncludeEnv } from \"./types.js\";\nimport { NEWLINES_RE, dedent } from \"./utils.js\";\n\ninterface ImportFileLineInfo {\n  filePath: string;\n  lineStart?: number;\n  lineEnd?: number;\n}\n\ninterface ImportFileRegionInfo {\n  filePath: string;\n  region: string;\n}\n\ntype ImportFileInfo = ImportFileLineInfo | ImportFileRegionInfo;\n\ninterface IncludeInfo {\n  cwd: string | null;\n  includedFiles: string[];\n  resolvedPath?: boolean;\n}\n\nconst REGIONS_RE = [\n  /^\\/\\/ ?#?((?:end)?region) ([\\w*-]+)$/, // javascript, typescript, java\n  /^\\/\\* ?#((?:end)?region) ([\\w*-]+) ?\\*\\/$/, // css, less, scss\n  /^#pragma ((?:end)?region) ([\\w*-]+)$/, // C, C++\n  /^<!-- #?((?:end)?region) ([\\w*-]+) -->$/, // HTML, markdown\n  /^#((?:End )Region) ([\\w*-]+)$/, // Visual Basic\n  /^::#((?:end)region) ([\\w*-]+)$/, // Bat\n  /^# ?((?:end)?region) ([\\w*-]+)$/, // C#, PHP, Powershell, Python, perl & misc\n];\n\n// regexp to match the import syntax\nconst INCLUDE_COMMENT_RE =\n  /^( *)<!-{2,}\\s*@include:\\s*([^<>|:\"*?]+(?:\\.[a-z0-9]+))(?:#([\\w-]+))?(?:\\{(\\d+)?-(\\d+)?\\})?\\s*-{2,}>\\s*$/gm;\nconst INCLUDE_RE =\n  /^( *)@include:\\s*([^<>|:\"*?]+(?:\\.[a-z0-9]+))(?:#([\\w-]+))?(?:\\{(\\d+)?-(\\d+)?\\})?\\s*$/gm;\n\nconst testLine = (\n  line: string,\n  regexp: RegExp,\n  regionName: string,\n  end = false,\n): boolean => {\n  const [full, tag, name] = regexp.exec(line.trim()) || [];\n\n  return Boolean(\n    full &&\n      tag &&\n      name === regionName &&\n      tag.match(end ? /^[Ee]nd ?[rR]egion$/ : /^[rR]egion$/),\n  );\n};\n\nconst findRegion = (\n  lines: string[],\n  regionName: string,\n): { lineStart: number; lineEnd: number } | null => {\n  let regexp = null;\n  let lineStart = -1;\n\n  for (const [lineId, line] of lines.entries())\n    if (regexp === null) {\n      for (const reg of REGIONS_RE)\n        if (testLine(line, reg, regionName)) {\n          lineStart = lineId + 1;\n          regexp = reg;\n          break;\n        }\n    } else if (testLine(line, regexp, regionName, true)) {\n      return { lineStart, lineEnd: lineId };\n    }\n\n  return null;\n};\n\nexport const handleInclude = (\n  info: ImportFileInfo,\n  { cwd, includedFiles, resolvedPath }: IncludeInfo,\n): string => {\n  const { filePath } = info;\n  let realPath = filePath;\n\n  if (!path.isAbsolute(filePath)) {\n    // if the importPath is relative path, we need to resolve it\n    // according to the markdown filePath\n    if (!cwd) {\n      console.error(\n        `[@mdit/plugin-include]: Error when resolving path: ${filePath}`,\n      );\n\n      return \"\\nError when resolving path\\n\";\n    }\n\n    realPath = path.resolve(cwd, filePath);\n  }\n\n  includedFiles.push(realPath);\n\n  // check file existence\n  if (!fs.existsSync(realPath)) {\n    console.error(`[@mdit/plugin-include]: ${realPath} not found`);\n\n    return \"\\nFile not found\\n\";\n  }\n\n  // read file content\n  const fileContent = fs.readFileSync(realPath).toString();\n\n  const lines = fileContent.replace(NEWLINES_RE, \"\\n\").split(\"\\n\");\n  let results: string[] = [];\n\n  // is region\n  if (\"region\" in info) {\n    const region = findRegion(lines, info.region);\n\n    if (region) results = lines.slice(region.lineStart, region.lineEnd);\n  }\n  // is file\n  else {\n    const { lineStart, lineEnd } = info;\n\n    if (lineStart) {\n      results = lines.slice(lineStart - 1, lineEnd);\n    } else if (lines[0] === \"---\") {\n      const endLineIndex = lines.findIndex(\n        (line, index) => index !== 0 && line === \"---\",\n      );\n\n      results = lines.slice(Math.max(endLineIndex + 1, 1), lineEnd);\n    } else {\n      results = lines.slice(0, lineEnd);\n    }\n  }\n\n  if (resolvedPath && realPath.endsWith(\".md\")) {\n    const dirName = path.dirname(realPath);\n\n    results.unshift(`@include-push(${dirName})`);\n    results.push(\"@include-pop()\");\n  }\n\n  return dedent(results.join(\"\\n\").replace(/\\n?$/, \"\\n\"));\n};\n\nexport const resolveInclude = (\n  content: string,\n  options: Required<MarkdownItIncludeOptions>,\n  { cwd, includedFiles }: IncludeInfo,\n): string =>\n  content.replace(\n    options.useComment ? INCLUDE_COMMENT_RE : INCLUDE_RE,\n    (\n      _,\n      indent: string,\n      includePath: string,\n      region?: string,\n      lineStart?: string,\n      lineEnd?: string,\n    ) => {\n      const actualPath = options.resolvePath(includePath, cwd);\n      const resolvedPath = options.resolveImagePath || options.resolveLinkPath;\n\n      const content = handleInclude(\n        {\n          filePath: actualPath,\n          ...(region\n            ? { region }\n            : {\n                ...(lineStart ? { lineStart: Number(lineStart) } : {}),\n                ...(lineEnd ? { lineEnd: Number(lineEnd) } : {}),\n              }),\n        },\n        { cwd, includedFiles, resolvedPath },\n      );\n\n      return (\n        options.deep && actualPath.endsWith(\".md\")\n          ? resolveInclude(content, options, {\n              cwd: path.isAbsolute(actualPath)\n                ? path.dirname(actualPath)\n                : cwd\n                ? path.resolve(cwd, path.dirname(actualPath))\n                : null,\n              includedFiles,\n            })\n          : content\n      )\n        .split(\"\\n\")\n        .map((line) => indent + line)\n        .join(\"\\n\");\n    },\n  );\n\nexport const createIncludeCoreRule =\n  (options: Required<MarkdownItIncludeOptions>): RuleCore =>\n  (state): void => {\n    const env = <IncludeEnv>state.env;\n    const includedFiles = env.includedFiles || (env.includedFiles = []);\n    const currentPath = options.currentPath(env);\n\n    state.src = resolveInclude(state.src, options, {\n      cwd: currentPath ? path.dirname(currentPath) : null,\n      includedFiles,\n    });\n  };\n\nconst SYNTAX_PUSH_RE = /^@include-push\\(([^)]*?)\\)$/;\nconst SYNTAX_POP_RE = /^@include-pop\\(\\)$/;\n\nconst includePushRule: RuleBlock = (state, startLine, _, silent): boolean => {\n  const pos = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  const content = state.src.slice(pos, max);\n  let result: boolean = content.startsWith(\"@include-push\");\n\n  if (result) {\n    // check if itâ€™s matched the syntax\n    const match = content.match(SYNTAX_PUSH_RE);\n\n    if (match) {\n      if (silent) return true;\n\n      const [, includePath] = match;\n\n      state.line = startLine + 1;\n      const token = state.push(\"include_push\", \"\", 0);\n\n      token.map = [startLine, state.line];\n      token.info = includePath;\n      token.markup = \"include_push\";\n    } else {\n      result = false;\n    }\n  }\n\n  return result;\n};\n\nconst includePopRule: RuleBlock = (state, startLine, _, silent): boolean => {\n  const pos = state.bMarks[startLine] + state.tShift[startLine];\n  const max = state.eMarks[startLine];\n  const content = state.src.slice(pos, max);\n  let result: boolean = content.startsWith(\"@include-pop\");\n\n  if (result) {\n    const match = content.match(SYNTAX_POP_RE);\n\n    if (match) {\n      if (silent) return true;\n\n      state.line = startLine + 1;\n\n      const token = state.push(\"include_pop\", \"\", 0);\n\n      token.map = [startLine, state.line];\n      token.markup = \"include_pop\";\n    } else {\n      result = false;\n    }\n  }\n\n  return result;\n};\n\nconst resolveRelatedLink = (\n  attr: string,\n  token: Token,\n  filePath: string,\n  includedPaths?: string[],\n): void => {\n  const attrIndex = token.attrIndex(attr);\n  const url = token.attrs?.[attrIndex][1];\n\n  if (url?.startsWith(\".\") && Array.isArray(includedPaths)) {\n    const { length } = includedPaths;\n\n    if (length) {\n      const includeDir = path.relative(\n        path.dirname(filePath),\n        includedPaths[length - 1],\n      );\n\n      const resolvedPath = path.join(includeDir, url);\n\n      token.attrs![attrIndex][1] = resolvedPath.startsWith(\".\")\n        ? resolvedPath\n        : `./${resolvedPath}`;\n    }\n  }\n};\n\nexport const include: PluginWithOptions<MarkdownItIncludeOptions> = (\n  md,\n  options,\n): void => {\n  const {\n    currentPath,\n    resolvePath = (path: string): string => path,\n    deep = false,\n    resolveLinkPath = true,\n    resolveImagePath = true,\n    useComment = true,\n  } = options || {};\n\n  if (typeof currentPath !== \"function\")\n    return console.error('[@mdit/plugin-include]: \"currentPath\" is required');\n\n  // add md_import core rule\n  md.core.ruler.after(\n    \"normalize\",\n    \"md_import\",\n    createIncludeCoreRule({\n      currentPath,\n      resolvePath,\n      deep,\n      resolveLinkPath,\n      resolveImagePath,\n      useComment,\n    }),\n  );\n\n  if (resolveImagePath || resolveLinkPath) {\n    md.block.ruler.before(\"table\", \"md_include_push\", includePushRule, {\n      alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n    });\n    md.block.ruler.before(\"table\", \"md_include_pop\", includePopRule, {\n      alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n    });\n\n    md.renderer.rules[\"include_push\"] = (\n      tokens,\n      index,\n      _options,\n      env: IncludeEnv,\n    ): string => {\n      const token = tokens[index];\n      const includedPaths = (env.includedPaths ??= []);\n\n      includedPaths.push(token.info);\n\n      return \"\";\n    };\n\n    md.renderer.rules[\"include_pop\"] = (\n      _tokens,\n      _index,\n      _options,\n      env: IncludeEnv,\n    ): string => {\n      const includedPaths = env.includedPaths;\n\n      if (Array.isArray(includedPaths)) includedPaths.pop();\n      else\n        console.error(\n          `[@mdit/plugin-include]: include_pop failed, no include_push.`,\n        );\n\n      return \"\";\n    };\n\n    if (resolveImagePath) {\n      const defaultImageRenderer = md.renderer.rules.image!;\n\n      md.renderer.rules.image = (\n        tokens,\n        index,\n        options,\n        env: IncludeEnv,\n        self,\n      ): string => {\n        const token = tokens[index];\n        const path = currentPath(env);\n\n        if (path) resolveRelatedLink(\"src\", token, path, env.includedPaths);\n\n        // pass token to default renderer.\n        return defaultImageRenderer(tokens, index, options, env, self);\n      };\n    }\n\n    if (resolveLinkPath) {\n      const defaultLinkRenderer =\n        md.renderer.rules[\"link_open\"] ||\n        ((tokens, index, options, _env, self): string =>\n          self.renderToken(tokens, index, options));\n\n      md.renderer.rules[\"link_open\"] = (\n        tokens,\n        index,\n        options,\n        env: IncludeEnv,\n        self,\n      ): string => {\n        const token = tokens[index];\n        const path = currentPath(env);\n\n        if (path) resolveRelatedLink(\"href\", token, path, env.includedPaths);\n\n        // pass token to default renderer.\n        return defaultLinkRenderer(tokens, index, options, env, self);\n      };\n    }\n  }\n};\n"],"names":["NEWLINES_RE","dedent","text","lines","minIndentLength","acc","line","i","x","REGIONS_RE","INCLUDE_COMMENT_RE","INCLUDE_RE","testLine","regexp","regionName","end","full","tag","name","findRegion","lineStart","lineId","reg","handleInclude","info","cwd","includedFiles","resolvedPath","filePath","realPath","path","fs","results","region","lineEnd","endLineIndex","index","dirName","resolveInclude","content","options","_","indent","includePath","actualPath","createIncludeCoreRule","state","env","currentPath","SYNTAX_PUSH_RE","SYNTAX_POP_RE","includePushRule","startLine","silent","pos","max","result","match","token","includePopRule","resolveRelatedLink","attr","includedPaths","attrIndex","url","length","includeDir","include","md","resolvePath","deep","resolveLinkPath","resolveImagePath","useComment","tokens","_options","_tokens","_index","defaultImageRenderer","self","defaultLinkRenderer","_env"],"mappings":"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"}