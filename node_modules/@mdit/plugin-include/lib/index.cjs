"use strict";var P=require("node:fs"),h=require("upath");const b=/\r\n?|\n/g,I=e=>{const r=e.split(`
`),t=r.reduce((s,o)=>{for(let n=0;n<o.length;n++)if(o[n]!==" "&&o[n]!=="	")return Math.min(n,s);return s},1/0);return t<1/0?r.map(s=>s.slice(t)).join(`
`):e},E=[/^\/\/ ?#?((?:end)?region) ([\w*-]+)$/,/^\/\* ?#((?:end)?region) ([\w*-]+) ?\*\/$/,/^#pragma ((?:end)?region) ([\w*-]+)$/,/^<!-- #?((?:end)?region) ([\w*-]+) -->$/,/^#((?:End )Region) ([\w*-]+)$/,/^::#((?:end)region) ([\w*-]+)$/,/^# ?((?:end)?region) ([\w*-]+)$/],S=/^( *)<!-{2,}\s*@include:\s*([^<>|:"*?]+(?:\.[a-z0-9]+))(?:#([\w-]+))?(?:\{(\d+)?-(\d+)?\})?\s*-{2,}>\s*$/gm,F=/^( *)@include:\s*([^<>|:"*?]+(?:\.[a-z0-9]+))(?:#([\w-]+))?(?:\{(\d+)?-(\d+)?\})?\s*$/gm,$=(e,r,t,s=!1)=>{const[o,n,l]=r.exec(e.trim())||[];return!!(o&&n&&l===t&&n.match(s?/^[Ee]nd ?[rR]egion$/:/^[rR]egion$/))},y=(e,r)=>{let t=null,s=-1;for(const[o,n]of e.entries())if(t===null){for(const l of E)if($(n,l,r)){s=o+1,t=l;break}}else if($(n,t,r,!0))return{lineStart:s,lineEnd:o};return null},k=(e,{cwd:r,includedFiles:t,resolvedPath:s})=>{const{filePath:o}=e;let n=o;if(!h.isAbsolute(o)){if(!r)return console.error(`[@mdit/plugin-include]: Error when resolving path: ${o}`),`
Error when resolving path
`;n=h.resolve(r,o)}if(t.push(n),!P.existsSync(n))return console.error(`[@mdit/plugin-include]: ${n} not found`),`
File not found
`;const l=P.readFileSync(n).toString().replace(b,`
`).split(`
`);let c=[];if("region"in e){const i=y(l,e.region);i&&(c=l.slice(i.lineStart,i.lineEnd))}else{const{lineStart:i,lineEnd:u}=e;if(i)c=l.slice(i-1,u);else if(l[0]==="---"){const d=l.findIndex((p,a)=>a!==0&&p==="---");c=l.slice(Math.max(d+1,1),u)}else c=l.slice(0,u)}if(s&&n.endsWith(".md")){const i=h.dirname(n);c.unshift(`@include-push(${i})`),c.push("@include-pop()")}return I(c.join(`
`).replace(/\n?$/,`
`))},v=(e,r,{cwd:t,includedFiles:s})=>e.replace(r.useComment?S:F,(o,n,l,c,i,u)=>{const d=r.resolvePath(l,t),p=r.resolveImagePath||r.resolveLinkPath,a=k({filePath:d,...c?{region:c}:{...i?{lineStart:Number(i)}:{},...u?{lineEnd:Number(u)}:{}}},{cwd:t,includedFiles:s,resolvedPath:p});return(r.deep&&d.endsWith(".md")?v(a,r,{cwd:h.isAbsolute(d)?h.dirname(d):t?h.resolve(t,h.dirname(d)):null,includedFiles:s}):a).split(`
`).map(f=>n+f).join(`
`)}),w=e=>r=>{const t=r.env,s=t.includedFiles||(t.includedFiles=[]),o=e.currentPath(t);r.src=v(r.src,e,{cwd:o?h.dirname(o):null,includedFiles:s})},R=/^@include-push\(([^)]*?)\)$/,W=/^@include-pop\(\)$/,x=(e,r,t,s)=>{const o=e.bMarks[r]+e.tShift[r],n=e.eMarks[r],l=e.src.slice(o,n);let c=l.startsWith("@include-push");if(c){const i=l.match(R);if(i){if(s)return!0;const[,u]=i;e.line=r+1;const d=e.push("include_push","",0);d.map=[r,e.line],d.info=u,d.markup="include_push"}else c=!1}return c},A=(e,r,t,s)=>{const o=e.bMarks[r]+e.tShift[r],n=e.eMarks[r],l=e.src.slice(o,n);let c=l.startsWith("@include-pop");if(c)if(l.match(W)){if(s)return!0;e.line=r+1;const i=e.push("include_pop","",0);i.map=[r,e.line],i.markup="include_pop"}else c=!1;return c},_=(e,r,t,s)=>{const o=r.attrIndex(e),n=r.attrs?.[o][1];if(n?.startsWith(".")&&Array.isArray(s)){const{length:l}=s;if(l){const c=h.relative(h.dirname(t),s[l-1]),i=h.join(c,n);r.attrs[o][1]=i.startsWith(".")?i:`./${i}`}}},M=(e,r)=>{const{currentPath:t,resolvePath:s=i=>i,deep:o=!1,resolveLinkPath:n=!0,resolveImagePath:l=!0,useComment:c=!0}=r||{};if(typeof t!="function")return console.error('[@mdit/plugin-include]: "currentPath" is required');if(e.core.ruler.after("normalize","md_import",w({currentPath:t,resolvePath:s,deep:o,resolveLinkPath:n,resolveImagePath:l,useComment:c})),l||n){if(e.block.ruler.before("table","md_include_push",x,{alt:["paragraph","reference","blockquote","list"]}),e.block.ruler.before("table","md_include_pop",A,{alt:["paragraph","reference","blockquote","list"]}),e.renderer.rules.include_push=(i,u,d,p)=>{const a=i[u];return(p.includedPaths??=[]).push(a.info),""},e.renderer.rules.include_pop=(i,u,d,p)=>{const a=p.includedPaths;return Array.isArray(a)?a.pop():console.error("[@mdit/plugin-include]: include_pop failed, no include_push."),""},l){const i=e.renderer.rules.image;e.renderer.rules.image=(u,d,p,a,f)=>{const g=u[d],m=t(a);return m&&_("src",g,m,a.includedPaths),i(u,d,p,a,f)}}if(n){const i=e.renderer.rules.link_open||((u,d,p,a,f)=>f.renderToken(u,d,p));e.renderer.rules.link_open=(u,d,p,a,f)=>{const g=u[d],m=t(a);return m&&_("href",g,m,a.includedPaths),i(u,d,p,a,f)}}}};exports.createIncludeCoreRule=w,exports.handleInclude=k,exports.include=M,exports.resolveInclude=v;
//# sourceMappingURL=index.cjs.map
