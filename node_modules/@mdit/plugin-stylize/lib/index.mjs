const p=(e,s,g=[])=>{for(let t=1,a=e.length;t<a-1;t++){const i=e[t],{content:c,type:f}=i;if(f!=="text"||g.includes(c))continue;const l=s.find(({matcher:n})=>typeof n=="string"?n===c:n.test(c)),o=e[t-1],r=e[t+1];if(l&&o.tag===r.tag&&o.nesting===1&&r.nesting===-1){const n=l.replacer({tag:o.tag,content:i.content,attrs:Object.fromEntries(o.attrs||[])});n&&(o.tag=r.tag=n.tag,o.attrs=Object.entries(n.attrs),i.content=n.content),t+=2}}},h=(e,s={})=>{s.config?.length!=0&&e.core.ruler.push("stylize_tag",({env:g,tokens:t})=>{const a=s.localConfigGetter?.(g)??[];t.forEach(({type:i,children:c})=>{i==="inline"&&c&&p(c,[...a,...s.config??[]])})})};export{h as stylize};
//# sourceMappingURL=index.mjs.map
