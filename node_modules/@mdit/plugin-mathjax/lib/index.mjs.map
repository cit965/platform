{"version":3,"file":"index.mjs","sources":["../src/plugin.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n/**\n * Forked from https://github.com/tani/markdown-it-mathjax3/blob/master/index.ts\n */\n\nimport { createRequire } from \"node:module\";\n\nimport { tex } from \"@mdit/plugin-tex\";\nimport { type PluginWithOptions } from \"markdown-it\";\nimport { type LiteDocument } from \"mathjax-full/js/adaptors/lite/Document.js\";\nimport {\n  type LiteElement,\n  type LiteNode,\n} from \"mathjax-full/js/adaptors/lite/Element.js\";\nimport { type LiteText } from \"mathjax-full/js/adaptors/lite/Text.js\";\nimport { type LiteAdaptor } from \"mathjax-full/js/adaptors/liteAdaptor.js\";\nimport { type MathDocument } from \"mathjax-full/js/core/MathDocument.js\";\nimport { type TeX } from \"mathjax-full/js/input/tex.js\";\nimport { type CHTML } from \"mathjax-full/js/output/chtml.js\";\nimport { type SVG } from \"mathjax-full/js/output/svg.js\";\nimport path from \"upath\";\n\nimport { type MarkdownItMathjaxOptions } from \"./options.js\";\n\nconst require = createRequire(import.meta.url);\n\nexport interface DocumentOptions {\n  InputJax: TeX<LiteElement, string, HTMLElement>;\n  OutputJax:\n    | CHTML<LiteElement, string, HTMLElement>\n    | SVG<LiteElement, string, HTMLElement>;\n  enableAssistiveMml: boolean;\n}\n\nexport const getDocumentOptions = (\n  options: MarkdownItMathjaxOptions,\n): DocumentOptions | null => {\n  try {\n    const { AllPackages } = <\n      typeof import(\"mathjax-full/js/input/tex/AllPackages.js\")\n    >require(\"mathjax-full/js/input/tex/AllPackages.js\");\n\n    const { TeX } = <typeof import(\"mathjax-full/js/input/tex.js\")>(\n      require(\"mathjax-full/js/input/tex.js\")\n    );\n    const { CHTML } = <typeof import(\"mathjax-full/js/output/chtml.js\")>(\n      require(\"mathjax-full/js/output/chtml.js\")\n    );\n    const { SVG } = <typeof import(\"mathjax-full/js/output/svg.js\")>(\n      require(\"mathjax-full/js/output/svg.js\")\n    );\n\n    return {\n      InputJax: new TeX<LiteElement, string, HTMLElement>({\n        packages: AllPackages,\n        ...options.tex,\n      }),\n      OutputJax:\n        options.output === \"chtml\"\n          ? new CHTML<LiteElement, string, HTMLElement>({\n              fontURL: path.dirname(\n                require.resolve(\n                  \"mathjax-full/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff\",\n                ),\n              ),\n              adaptiveCSS: true,\n              ...options.chtml,\n            })\n          : new SVG<LiteElement, string, HTMLElement>({\n              fontCache: \"none\",\n              ...options.svg,\n            }),\n      enableAssistiveMml: options.a11y !== false,\n    };\n  } catch (err) {\n    console.error('[@mdit/mathjax] \"mathjax-full\" is not installed!');\n\n    return null;\n  }\n};\n\n/**\n * Mathjax instance\n */\nexport interface MathjaxInstance\n  extends Required<\n    Pick<MarkdownItMathjaxOptions, \"allowInlineWithSpace\" | \"mathFence\">\n  > {\n  /**\n   * Mathjax adaptor\n   */\n  adaptor: LiteAdaptor;\n\n  /**\n   * Mathjax document options\n   */\n  documentOptions: DocumentOptions;\n\n  /**\n   * Clear style cache\n   */\n  clearStyle: () => void;\n\n  /**\n   * Output style for rendered content and clears it\n   *\n   * @returns style\n   */\n  outputStyle: () => string;\n\n  /**\n   * Reset tex (including labels)\n   */\n  reset: () => void;\n}\n\nexport const createMathjaxInstance = (\n  options: MarkdownItMathjaxOptions = {},\n): MathjaxInstance | null => {\n  const documentOptions = getDocumentOptions(options);\n\n  if (!documentOptions) return null;\n\n  const { OutputJax, InputJax } = documentOptions;\n\n  const { CHTML } = <typeof import(\"mathjax-full/js/output/chtml.js\")>(\n    require(\"mathjax-full/js/output/chtml.js\")\n  );\n  const adaptor = (<typeof import(\"mathjax-full/js/adaptors/liteAdaptor.js\")>(\n    require(\"mathjax-full/js/adaptors/liteAdaptor.js\")\n  )).liteAdaptor();\n  const registerHTMLHandler = (<\n    typeof import(\"mathjax-full/js/handlers/html.js\")\n  >require(\"mathjax-full/js/handlers/html.js\")).RegisterHTMLHandler;\n  const assistiveMmlHandler = (<\n    typeof import(\"mathjax-full/js/a11y/assistive-mml.js\")\n  >require(\"mathjax-full/js/a11y/assistive-mml.js\")).AssistiveMmlHandler;\n  const { mathjax } = <typeof import(\"mathjax-full/js/mathjax.js\")>(\n    require(\"mathjax-full/js/mathjax.js\")\n  );\n\n  const handler = registerHTMLHandler(adaptor);\n\n  if (options.a11y !== false)\n    assistiveMmlHandler<LiteNode, LiteText, LiteDocument>(handler);\n\n  const clearStyle = (): void => {\n    // clear style cache\n    if (OutputJax instanceof CHTML) OutputJax.clearCache();\n  };\n\n  const reset = (): void => {\n    InputJax.reset();\n  };\n\n  const outputStyle = (): string => {\n    const style = adaptor.innerHTML(\n      OutputJax.styleSheet(\n        <MathDocument<LiteElement, string, HTMLElement>>(\n          mathjax.document(\"\", documentOptions)\n        ),\n      ),\n    );\n\n    clearStyle();\n\n    return style;\n  };\n\n  return {\n    adaptor,\n    documentOptions,\n    allowInlineWithSpace: options.allowInlineWithSpace ?? false,\n    mathFence: options.mathFence ?? false,\n    clearStyle,\n    reset,\n    outputStyle,\n  };\n};\n\nexport const mathjax: PluginWithOptions<MathjaxInstance> = (md, options) => {\n  const { mathjax } = <typeof import(\"mathjax-full/js/mathjax.js\")>(\n    require(\"mathjax-full/js/mathjax.js\")\n  );\n  const { allowInlineWithSpace, adaptor, documentOptions, mathFence } =\n    options!;\n\n  md.use(tex, {\n    allowInlineWithSpace,\n    mathFence,\n    render: (content, displayMode) => {\n      const mathDocument = <LiteElement>(\n        mathjax.document(content, documentOptions).convert(content, {\n          display: displayMode,\n        })\n      );\n\n      return adaptor.outerHTML(mathDocument);\n    },\n  });\n};\n"],"names":["require","createRequire","getDocumentOptions","options","AllPackages","TeX","CHTML","SVG","path","createMathjaxInstance","documentOptions","OutputJax","InputJax","adaptor","registerHTMLHandler","assistiveMmlHandler","mathjax","handler","clearStyle","reset","outputStyle","style","md","allowInlineWithSpace","mathFence","tex","content","displayMode","mathDocument"],"mappings":"wGAwBA,MAAMA,EAAUC,EAAc,YAAY,GAAG,EAUhCC,EACXC,GAC2B,CAC3B,GAAI,CACF,KAAM,CAAE,YAAAC,CAAY,EAEnBJ,EAAQ,0CAA0C,EAE7C,CAAE,IAAAK,CAAI,EACVL,EAAQ,8BAA8B,EAElC,CAAE,MAAAM,CAAM,EACZN,EAAQ,iCAAiC,EAErC,CAAE,IAAAO,CAAI,EACVP,EAAQ,+BAA+B,EAGzC,MAAO,CACL,SAAU,IAAIK,EAAsC,CAClD,SAAUD,EACV,GAAGD,EAAQ,GACb,CAAC,EACD,UACEA,EAAQ,SAAW,QACf,IAAIG,EAAwC,CAC1C,QAASE,EAAK,QACZR,EAAQ,QACN,+DACF,CACF,EACA,YAAa,GACb,GAAGG,EAAQ,KACb,CAAC,EACD,IAAII,EAAsC,CACxC,UAAW,OACX,GAAGJ,EAAQ,GACb,CAAC,EACP,mBAAoBA,EAAQ,OAAS,EACvC,CACF,MAAc,CACZ,OAAA,QAAQ,MAAM,kDAAkD,EAEzD,IACT,CACF,EAqCaM,EAAwB,CACnCN,EAAoC,CAAA,IACT,CAC3B,MAAMO,EAAkBR,EAAmBC,CAAO,EAElD,GAAI,CAACO,EAAiB,OAAO,KAE7B,KAAM,CAAE,UAAAC,EAAW,SAAAC,CAAS,EAAIF,EAE1B,CAAE,MAAAJ,CAAM,EACZN,EAAQ,iCAAiC,EAErCa,EACJb,EAAQ,yCAAyC,EAChD,cACGc,EAELd,EAAQ,kCAAkC,EAAG,oBACxCe,EAELf,EAAQ,uCAAuC,EAAG,oBAC7C,CAAE,QAAAgB,CAAQ,EACdhB,EAAQ,4BAA4B,EAGhCiB,EAAUH,EAAoBD,CAAO,EAEvCV,EAAQ,OAAS,IACnBY,EAAsDE,CAAO,EAE/D,MAAMC,EAAa,IAAY,CAEzBP,aAAqBL,GAAOK,EAAU,WAAW,CACvD,EAEMQ,EAAQ,IAAY,CACxBP,EAAS,MAAA,CACX,EAEMQ,EAAc,IAAc,CAChC,MAAMC,EAAQR,EAAQ,UACpBF,EAAU,WAENK,EAAQ,SAAS,GAAIN,CAAe,CAExC,CACF,EAEA,OAAAQ,EAAW,EAEJG,CACT,EAEA,MAAO,CACL,QAAAR,EACA,gBAAAH,EACA,qBAAsBP,EAAQ,sBAAwB,GACtD,UAAWA,EAAQ,WAAa,GAChC,WAAAe,EACA,MAAAC,EACA,YAAAC,CACF,CACF,EAEaJ,EAA8C,CAACM,EAAInB,IAAY,CAC1E,KAAM,CAAE,QAAAa,CAAQ,EACdhB,EAAQ,4BAA4B,EAEhC,CAAE,qBAAAuB,EAAsB,QAAAV,EAAS,gBAAAH,EAAiB,UAAAc,CAAU,EAChErB,EAEFmB,EAAG,IAAIG,EAAK,CACV,qBAAAF,EACA,UAAAC,EACA,OAAQ,CAACE,EAASC,IAAgB,CAChC,MAAMC,EACJZ,EAAQ,SAASU,EAAShB,CAAe,EAAE,QAAQgB,EAAS,CAC1D,QAASC,CACX,CAAC,EAGH,OAAOd,EAAQ,UAAUe,CAAY,CACvC,CACF,CAAC,CACH"}