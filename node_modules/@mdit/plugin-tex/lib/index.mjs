const u=(t,r,o)=>{const s=r>0?t.src.charAt(r-1):"",e=r+1<=t.posMax?t.src.charAt(r+1):"";return{canOpen:o||e!==" "&&e!=="	",canClose:!/[0-9]/u.exec(e)&&(o||s!==" "&&s!=="	")}},h=t=>(r,o)=>{let s,e,i,c;if(r.src[r.pos]!=="$")return!1;if(i=u(r,r.pos,t),!i.canOpen)return o||(r.pending+="$"),r.pos+=1,!0;const n=r.pos+1;for(s=n;(s=r.src.indexOf("$",s))!==-1;){for(e=s-1;r.src[e]==="\\";)e-=1;if((s-e)%2===1)break;s+=1}return s===-1?(o||(r.pending+="$"),r.pos=n,!0):s-n===0?(o||(r.pending+="$$"),r.pos=n+1,!0):(i=u(r,s,t),i.canClose?(o||(c=r.push("math_inline","math",0),c.markup="$",c.content=r.src.slice(n,s)),r.pos=s+1,!0):(o||(r.pending+="$"),r.pos=n,!0))},m=(t,r,o,s)=>{let e,i,c,n,a=!1,l=t.bMarks[r]+t.tShift[r],p=t.eMarks[r];if(l+2>p||t.src.slice(l,l+2)!=="$$")return!1;if(l+=2,e=t.src.slice(l,p),s)return!0;for(e.trim().endsWith("$$")&&(e=e.trim().slice(0,-2),a=!0),c=r;!a&&(c+=1,!(c>=o||(l=t.bMarks[c]+t.tShift[c],p=t.eMarks[c],l<p&&t.tShift[c]<t.blkIndent)));)t.src.slice(l,p).trim().endsWith("$$")&&(n=t.src.slice(0,p).lastIndexOf("$$"),i=t.src.slice(l,n),a=!0);t.line=c+1;const f=t.push("math_block","math",0);return f.block=!0,f.content=(e?.trim()?`
${e}
`:`
`)+t.getLines(r+1,c,t.tShift[r],!0)+(i?.trim()?i:""),f.map=[r,t.line],f.markup="$$",!0},$=(t,r)=>{const{allowInlineWithSpace:o=!1,mathFence:s=!1,render:e}=r||{};if(typeof e!="function")throw new Error('[@mdit/plugin-tex]: "render" option should be a function');if(s){const i=t.renderer.rules.fence;t.renderer.rules.fence=(...c)=>{const[n,a,,l]=c,{content:p,info:f}=n[a];return f.trim()==="math"?e(p,!0,l):i(...c)}}t.inline.ruler.after("escape","math_inline",h(o)),t.block.ruler.after("blockquote","math_block",m,{alt:["paragraph","reference","blockquote","list"]}),t.renderer.rules.math_inline=(i,c,n,a)=>e(i[c].content,!1,a),t.renderer.rules.math_block=(i,c,n,a)=>e(i[c].content,!0,a)};export{$ as tex};
//# sourceMappingURL=index.mjs.map
