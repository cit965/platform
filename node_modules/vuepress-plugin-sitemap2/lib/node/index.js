import{getDirname as b,path as P,colors as w,fs as f}from"@vuepress/utils";import{ensureEndingSlash as U,Logger as D,isLinkHttp as M,removeEndingSlash as F,removeLeadingSlash as x,checkVersion as G}from"vuepress-shared/node";import{SitemapStream as N}from"sitemap";const k=b(import.meta.url),q=U(P.resolve(k,"../../templates")),L="vuepress-plugin-sitemap2",m=new D(L),O=({options:e,deprecatedOption:t,newOption:o,msg:s="",scope:l=""})=>{if(t in e){if(m.warn(`${w.magenta(t)} is ${w.yellow("deprecated")}${l?` in ${l}`:""}, please use "${w.magenta(o)}" instead.${s?`
${s}`:""}`),o.includes(".")){const d=o.split(".");let i=e;d.forEach((c,u)=>{u!==d.length-1?(i[c]=i[c]||{},i=i[c]):i[c]=e[t]})}else e[o]=e[t];delete e[t]}},A=e=>{O({options:e,deprecatedOption:"urls",newOption:"extraUrls"}),O({options:e,deprecatedOption:"exclude",newOption:"excludeUrls"}),O({options:e,deprecatedOption:"outFile",newOption:"sitemapFilename"}),O({options:e,deprecatedOption:"dateFormatter",newOption:"modifyTimeGetter"})},E=[],v=({path:e,pathLocale:t})=>({defaultPath:e.replace(t,"/"),pathLocale:t}),X=(e,t)=>{const{changefreq:o="daily",excludeUrls:s=["/404.html"],modifyTimeGetter:l=a=>a.data.git?.updatedTime?new Date(a.data.git.updatedTime).toISOString():""}=t,{options:{base:d,locales:i},pages:c}=e,u=c.reduce((a,g)=>{const{defaultPath:r,pathLocale:$}=v(g),p=a.get(r)||[];return p.push($),a.set(r,p)},new Map),h=new Map;return c.forEach(a=>{const g=a.frontmatter.sitemap;if(g===!1||((a.frontmatter.head||[]).find(n=>n[1].name==="robots")?.[1].content||"").split(/,/u).map(n=>n.trim()).includes("noindex")||s.includes(a.path))return;const r=l(a,e),{defaultPath:$}=v(a),p=u.get($)||[];let y=[];p.length>1&&(e.env.isDebug&&p.forEach(n=>{!i[n].lang&&!E.includes(n)&&(m.warn(`"lang" option for ${n} is missing`),E.push(n))}),y=p.map(n=>({lang:i[n]?.lang||"en",url:`${d}${x($.replace(/^\//u,n))}`})));const S={...o?{changefreq:o}:{},links:y,...r?{lastmod:r}:{},...g};e.env.isDebug&&m.info(`sitemap option for ${a.path}: ${JSON.stringify(S,null,2)}`),h.set(a.path,S)}),h},I=async(e,t)=>{const{extraUrls:o=[],xmlNameSpace:s}=t,l=M(t.hostname)?F(t.hostname):`https://${F(t.hostname)}`,d=t.sitemapFilename?x(t.sitemapFilename):"sitemap.xml",i=t.sitemapXSLFilename?x(t.sitemapXSLFilename):"sitemap.xsl",c=t.sitemapXSLTemplate??`${q}sitemap.xsl`,{dir:u,options:{base:h}}=e;m.load(`Generating sitemap to ${w.cyan(`/${d}`)}`),await new Promise(g=>{const r=new N({hostname:l,...s?{xmlns:s}:{}}),$=X(e,t),p=u.dest(d),y=u.dest(i),S=f.createWriteStream(p);r.pipe(S),$.forEach((n,T)=>r.write({url:`${h}${x(T)}`,...n})),S.on("finish",()=>{const n=f.readFileSync(p,{encoding:"utf-8"});f.writeFileSync(p,n.replace('<?xml version="1.0" encoding="UTF-8"?>',`<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="${h}${i}"?>
`)),f.copySync(c,y),g()}),o.forEach(n=>r.write({url:`${h}${x(n)}`})),r.end()}),m.succeed();const a=u.dest("robots.txt");if(f.existsSync(a)){m.load(`Appended sitemap path to ${w.cyan("robots.txt")}`);const g=`${(await f.readFile(a,{encoding:"utf8"})).replace(/^Sitemap: .*$/u,"")}
Sitemap: ${l}${h}${d}
`;await f.writeFile(a,g,{flag:"w"}),m.succeed()}},_=(e,t=!0)=>o=>{t&&A(e),G(o,L,"2.0.0-rc.0"),o.env.isDebug&&m.info("Options:",e);const s={name:L};return e.hostname?{...s,onGenerated:l=>I(l,e)}:(m.error(`Option ${w.magenta("hostname")} is required!`),s)};export{_ as sitemapPlugin};
//# sourceMappingURL=index.js.map
